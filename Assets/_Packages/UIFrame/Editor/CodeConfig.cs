using System.Collections.Generic;

namespace UIFrame.Editor
{
    public class CodeConfig
    {
        /// <summary>
        /// 需要注册事件的UI控件类型
        /// </summary>
        public enum EventComponentType
        {
            Button,
            ButtonExtend,
            Toggle,
            Slider,
            InputField,
            ScrollRect,
            Scrollbar,
            Dropdown,
        }

        public static Dictionary<string, string> EventParamDic = new Dictionary<string, string>
        {
            {"Toggle", "bool"},
            {"Slider", "float"}, {"InputField", "string"}, {"ScrollRect", "Vector2"}, {"Scrollbar", "float"},
            {"Dropdown", "int"},
        };

        public const string regionStartFmt = "\n\t#region {0} \n";
        public const string regionEnd = "\t#endregion \n";

        public static string statementRegion = string.Format(regionStartFmt, "UI Variable Statement");
        public static string eventRegion = string.Format(regionStartFmt, "UI Event Register");
        public static string assignRegion = string.Format(regionStartFmt, "UI Variable Assignment");

        public const string methodStartFmt = "\tprivate void {0}() \n\t{{\n"; //'{'要转义
        public const string methodEnd = "\n\t}\n";

        public const string codeAnnotation = @"//This script is automatically generated by QuickGenerateScript.
-----------------------------------------------------------------------------------------------------------------------";


        public const string usingNamespace =
            "\nusing UnityEngine;" +
            "\nusing System.Collections;" +
            "\nusing UnityEngine.UI;" +
            "\nusing TMPro;" +
            "\nusing Tools.UI;" +
            "\nusing EventModule;";

        public const string componentsPanelStart = "\npublic class {0} : PanelBase\n{{\n";
        public const string componentsMonoStart = "\npublic class {0} : MonoBehaviour\n{{\n";
        public const string classStart = "\npublic class {0} : {1}\n{{\n";
        public const string classEnd = "\n}\n";

        public const string PanelOverride =
            "\tpublic override void Init()\n\t{{\n\t\tbase.Init();\n\t\tAddEvent();\n\t}}\n\n" +
            "\tpublic override void Open(params object[] args)\n\t{{\n\t\tbase.Open(args);\n\t\tEventManager.TriggerEvent(\"On{0}ChangeActive\", true);\n\t}}\n\n" +
            "\tpublic override void Close()\n\t{{\n\t\tbase.Close();\n\t\tEventManager.TriggerEvent(\"On{0}ChangeActive\", false);\n\t}}\n";

        public const string MonoOverride = "\tpublic virtual void Init()\n\t{{\n\t\tAddEvent();\n\t}}\n\n";

        public const string methodAnnotation = "\n\t/// <summary>\n\t/// {0}\n\t/// </summary>\n";
    }
}